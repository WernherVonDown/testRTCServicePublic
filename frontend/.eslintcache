[{"/home/lord/Документы/node/headlessBot/frontend/src/index.js":"1","/home/lord/Документы/node/headlessBot/frontend/src/App.js":"2","/home/lord/Документы/node/headlessBot/frontend/src/components/Login/index.js":"3","/home/lord/Документы/node/headlessBot/frontend/src/components/Login/LoginForm.js":"4","/home/lord/Документы/node/headlessBot/frontend/src/socket.js":"5","/home/lord/Документы/node/headlessBot/frontend/src/components/MainPage/index.js":"6","/home/lord/Документы/node/headlessBot/frontend/src/components/MainPage/Settings.js":"7","/home/lord/Документы/node/headlessBot/frontend/src/components/MainPage/Result.js":"8","/home/lord/Документы/node/headlessBot/frontend/src/components/Preloader/index.js":"9","/home/lord/Документы/node/headlessBot/frontend/src/components/Timer/index.js":"10","/home/lord/Документы/node/headlessBot/frontend/src/components/Chart/index.js":"11","/home/lord/Документы/node/headlessBot/frontend/src/components/SnakeGame/index.js":"12","/home/lord/Документы/node/headlessBot/frontend/src/components/SnakeGame/Snake.js":"13","/home/lord/Документы/node/headlessBot/frontend/src/components/History/index.js":"14"},{"size":219,"mtime":1611856390252,"results":"15","hashOfConfig":"16"},{"size":742,"mtime":1612003605896,"results":"17","hashOfConfig":"16"},{"size":507,"mtime":1614248749681,"results":"18","hashOfConfig":"16"},{"size":745,"mtime":1613017048963,"results":"19","hashOfConfig":"16"},{"size":192,"mtime":1613645160395,"results":"20","hashOfConfig":"16"},{"size":9714,"mtime":1614884399626,"results":"21","hashOfConfig":"16"},{"size":7555,"mtime":1613667381545,"results":"22","hashOfConfig":"16"},{"size":8089,"mtime":1616071012753,"results":"23","hashOfConfig":"16"},{"size":504,"mtime":1612202738125,"results":"24","hashOfConfig":"16"},{"size":765,"mtime":1612288501866,"results":"25","hashOfConfig":"16"},{"size":665,"mtime":1614883852051,"results":"26","hashOfConfig":"16"},{"size":2358,"mtime":1613110005157,"results":"27","hashOfConfig":"16"},{"size":1848,"mtime":1613022005307,"results":"28","hashOfConfig":"16"},{"size":1424,"mtime":1614884063469,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mndaup",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"/home/lord/Документы/node/headlessBot/frontend/src/index.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/App.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/Login/index.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/Login/LoginForm.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/socket.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/MainPage/index.js",["62"],"import React, { Component } from 'react';\nimport { socket } from '../../socket';\nimport Settings from './Settings';\nimport Result from './Result';\nimport classnames from 'classnames';\nimport M from 'materialize-css/dist/js/materialize.min.js'\nimport History from '../History'\n\n//let settingsPageHeight = 0;\n\nconst defaultState = {\n    videosEnabled: {\n        // 0: [\n        //     {probeId:0, num:2},\n        //     {probeId:1, num:3},\n        //     {probeId:2, num:2},\n        //     {probeId:3, num:4},\n        // ],\n        // 1: [\n        //     {probeId:0, num:1},\n        //     {probeId:1, num:0},\n        //     {probeId:2, num:2},\n        //     {probeId:3, num:3},\n        //     {probeId:4, num:1},\n        //     {probeId:5, num:0},\n        //     {probeId:6, num:2},\n        //     {probeId:7, num:3},\n        //     {probeId:8, num:1},\n        //     {probeId:9, num:0},\n        //     {probeId:10, num:2},\n        //     {probeId:11, num:3},\n        // ],\n        // 2: [\n        //     {probeId:0, num:4},\n        //     {probeId:1, num:4},\n        //     {probeId:2, num:4},\n        //     {probeId:3, num:4},\n        // ]\n    },\n    sessionStarted: false,\n    sessionStarted: false,\n    allVideosCount: 0,\n    maxVideosCount: 0,\n    startTimer: false,\n    showResult: false,\n    screenshots: {},\n    isSessionOwner: true,\n    chartData: [[], []]\n}\n\nclass MainPage extends Component {\n    state = { ...defaultState, settingsPageHeight: 0, historySessions: [\n        // {\n        //     sessionId: '1613148551769', \n        //     settings: {\n        //     size: 1,\n        //     probes: 1,\n        //     pageLoadTimeout: 5,\n        //     screenshotInterval: 30,\n        //     connectionCheckInterval: 5,\n        //     duration: 300,\n        //     rooms: 1,\n        //     target: 'test',\n        //     servers: 2}\n        // },\n        // {\n        //     sessionId: '1613148551723', \n        //     settings: {\n        //     size: 1,\n        //     probes: 1,\n        //     pageLoadTimeout: 5,\n        //     screenshotInterval: 30,\n        //     connectionCheckInterval: 5,\n        //     duration: 300,\n        //     rooms: 1,\n        //     target: 'test',\n        //     servers: 2}\n        // },\n    ]};\n    \n\n    componentDidMount() {\n        this.subsctibe();\n        //this.getVideosEnabledData(this.state.videosEnabled);\n        this.calcSettingsHeight()\n    }\n\n    componentWillUnmount() {\n        this.unsubscribe();\n    }\n\n    calcSettingsHeight = () => {\n        const element = document.getElementById('settingsForm');\n        const settingsPageHeight = element.offsetHeight;\n        this.setState({ settingsPageHeight })\n    }\n\n    getTransitionEndEventName() {\n        const transitions = {\n            \"transition\": \"transitionend\",\n            \"OTransition\": \"oTransitionEnd\",\n            \"MozTransition\": \"transitionend\",\n            \"WebkitTransition\": \"webkitTransitionEnd\"\n        }\n        const bodyStyle = document.body.style;\n        for (let transition in transitions) {\n            if (bodyStyle[transition] !== undefined) {\n                return transitions[transition];\n            }\n        }\n    }\n\n    subsctibe() {\n        const transitionEndEventName = this.getTransitionEndEventName();\n        const mainPageWrapper = document.getElementById('mainPageWrapper');\n        socket.on('info:videosEnabled', this.getVideosEnabledData);\n        socket.on('info:bot', this.informServer);\n        window.addEventListener('resize', this.calcSettingsHeight);\n        mainPageWrapper.addEventListener(transitionEndEventName, this.removeTransition);\n        socket.on('bot:planEnd', this.setStartTimer);\n        socket.on('info:sessionTimeEnded', this.sessionTimeEnded);\n        socket.on('bot:screenshots', this.getScreenshots);\n        socket.on('startWachingSession', this.setIsSessionOwner);\n        socket.on('sessionStopped', this.setSessionStopped);\n        socket.on('historySessions', this.setHistorySessions);\n        socket.on('info:chartData', this.setChartData);\n    }\n\n    unsubscribe() {\n        const transitionEndEventName = this.getTransitionEndEventName();\n        const mainPageWrapper = document.getElementById('mainPageWrapper');\n        socket.off('info:videosEnabled', this.getVideosEnabledData);\n        socket.off('info:bot', this.informServer);\n        window.removeEventListener('resize', this.calcSettingsHeight);\n        mainPageWrapper.removeEventListener(transitionEndEventName, this.removeTransition);\n        socket.off('bot:planEnd', this.setStartTimer);\n        socket.off('info:sessionTimeEnded', this.sessionTimeEnded);\n        socket.off('bot:screenshots', this.getScreenshots)\n        socket.off('startWachingSession', this.setIsSessionOwner);\n        socket.off('sessionStopped', this.setSessionStopped);\n        socket.off('info:chartData', this.setChartData);\n    }\n\n    setChartData = (chartData) => {\n        console.log(chartData)\n        this.setState({chartData})\n    }\n\n    setHistorySessions = (historySessions) => {\n        this.setState({ historySessions });\n    }\n\n    setIsSessionOwner = (isSessionOwner) => {\n        console.log('setIsSessionOwner', isSessionOwner)\n        this.setState({ sessionStarted: true, showResult: true, isSessionOwner });\n    }\n\n    getScreenshots = (screenshots) => {\n        console.log('screenshots', screenshots)\n        const screenshotsCopy = { ...this.state.screenshots };\n        screenshots.forEach(s => {\n            const { probeId, sessionId } = s.pageParams;\n            const img = s.imgData;\n            const userKey = `room${sessionId}/user${probeId}`;\n            if (screenshotsCopy[userKey]) {\n                screenshotsCopy[userKey].push(img);\n            } else {\n                screenshotsCopy[userKey] = [img];\n            }\n        });\n        this.setState({\n            screenshots: screenshotsCopy\n        })\n    }\n\n    sessionTimeEnded = () => {\n        this.setState({ ...defaultState })\n    }\n\n    setStartTimer = () => {\n        this.setState({\n            startTimer: true\n        })\n    }\n\n    removeTransition = (e) => {\n        if (this.state.sessionStarted) {\n            e.target.classList.add('removeTransition')\n        } else {\n            e.target.classList.remove('removeTransition')\n        }\n    }\n\n    informServer(data) {\n        M.toast({ html: data })\n    }\n\n    getVideosEnabledData = (data) => {\n        console.log(data)\n        this.setState({ ...data })\n        // console.log('getVideosEnabledData',videosEnabled)\n        // const { maxVideosCount } = this.state;\n        // let allVideosCount = 0;\n        // const videosByRooms = {...this.state.videosEnabled};\n        // console.log('videosByRooms',videosEnabled)\n        // videosEnabled.forEach(({numberOfVideos, pageParams}) => {\n        //     const num = numberOfVideos;\n        //     const {sessionId, probeId} = pageParams;\n        //     allVideosCount += num ? num : 0;\n\n        //     if(!videosByRooms[sessionId]) {\n        //         videosByRooms[sessionId] = [];\n        //         videosByRooms[sessionId].push({probeId, num}) \n        //     } else {\n        //         if(videosByRooms[sessionId].find(e => e.probeId === probeId)){\n        //             videosByRooms[sessionId].forEach(e => {\n        //                 if(e.probeId === probeId) e.num = num\n        //             })\n        // const newMaxVideosCount = newMax ? allVideosCount : maxVideosCount;\n        // console.log('result', videosByRooms)\n\n        // const newMax = allVideosCount > maxVideosCount;\n        // const newMaxVideosCount = newMax ? allVideosCount : maxVideosCount;\n        // this.setState({\n        //     videosEnabled:videosByRooms,\n        //     allVideosCount,\n        //     maxVideosCount: newMaxVideosCount\n\n        // })\n    }\n\n    setSessionStopped = () => {\n        this.setState({ sessionStarted: false, startTimer: false })\n    }\n\n    stopSession = () => {\n        socket.emit('stopSession');\n        this.setSessionStopped()\n    }\n\n    startSession = (sessionSettings) => {\n        socket.emit('startSession', sessionSettings);\n    }\n\n    setShowResult = () => {\n        this.setState(defaultState);\n    }\n\n    requestSessionHistory = (sessionId) => {\n        this.setState({showResult:true})\n        socket.emit('getSessionHistory', sessionId)\n    }\n\n    render() {\n        const { sessionStarted, videosEnabled, allVideosCount, maxVideosCount, settingsPageHeight, startTimer, screenshots, showResult, isSessionOwner, historySessions, chartData } = this.state;\n        const mainPageWrapperStyle = showResult\n            ? { top: `-${settingsPageHeight}px`, height: `calc(100% + ${settingsPageHeight}px)` }\n            : { transition: 'top 0.5s ease' };\n\n        console.log(allVideosCount, maxVideosCount)\n        return (\n            <div className={classnames('mainPageWrapper')} id='mainPageWrapper' style={mainPageWrapperStyle}>\n                <Settings startSession={this.startSession} isSessionOwner={isSessionOwner} setShowResult={this.setShowResult} stopSession={this.stopSession} startTimer={startTimer} showResult={showResult} sessionStarted={sessionStarted} />\n                {\n                    // this.state.image && <img src={'data:image/png;base64,'+this.state.image} />\n                }\n                {\n                    !showResult && <History requestSessionHistory={this.requestSessionHistory} historySessions={historySessions} />\n                }\n                {showResult\n                    && <Result chartData={chartData} allVideosCount={allVideosCount} screenshots={screenshots} maxVideosCount={maxVideosCount} videosEnabled={videosEnabled} />}\n\n            </div>\n        )\n    };\n}\nexport default MainPage","/home/lord/Документы/node/headlessBot/frontend/src/components/MainPage/Settings.js",["63"],"import { useState } from 'react';\nimport 'materialize-css/dist/css/materialize.min.css'\nimport Timer from '../Timer'\nimport SnakeGame from '../SnakeGame'\nimport { type } from 'os';\n\nconst targetUrls = {\n    test: 'https://test-braincert.staging.forasoft.com/',\n    dev: 'https://dev-braincert.staging.forasoft.com/',\n    preprod: 'http://preprod-braincert.staging.forasoft.com/',\n    API: 'http://18.204.178.243/openRoom'\n}\nfunction Settings(props) {\n    const [sessionSettings, setSessionSettings] = useState({\n        size: '1',\n        probes: '1',\n        pageLoadTimeout: '5',\n        screenshotInterval: '30',\n        connectionCheckInterval: '5',\n        duration: '5',\n        rooms: 1,\n        target: 'test',\n        servers: 1,\n        serversType: 't2.micro',\n        isRegion: 28\n    });\n\n    const calcRooms = ({value, name}) => {\n        const copySessionSettings = { ...sessionSettings };\n        copySessionSettings[name] = value;\n        const {size, probes} = copySessionSettings;\n        const needIncrease = +probes > +size && probes % size ? 1 : 0;\n        const numberOfRooms = Math.floor(probes / size) + needIncrease;\n   // console.log(numberOfRooms, needIncrease, probes > size, {size, probes}, probes % size)\n        return numberOfRooms || 1;\n    }\n\n    const calcSession = (e) => {\n        const {size} = sessionSettings;\n        const probes = e.target.value * size\n        setSessionSettings({...sessionSettings, probes})\n    }\n\n    const changeHandler = async e => {  \n        console.log(e.target.name, e.target.value)\n        const rooms = e.target.attributes.calcrooms \n            ? calcRooms(e.target)\n            : sessionSettings.rooms;\n        setSessionSettings({...sessionSettings, rooms, [e.target.name]: e.target.value});\n     }\n\n     const sendSettings = () => {\n         const sessionSettingsCopy = {...sessionSettings};\n        Object.keys(sessionSettingsCopy).forEach(key => {\n            if (key === 'target' || key === 'serversType') return; \n            sessionSettingsCopy[key] = key === 'duration' ? +sessionSettingsCopy[key] * 60 : +sessionSettingsCopy[key]\n        })\n        props.startSession(sessionSettingsCopy);\n     }\n\n     const stopSession = () => {\n        props.stopSession();\n     }\n\n     const renderSettingsBottom = () => {\n         console.log(props.isSessionOwner && props.sessionStarted)\n        if(props.sessionStarted && props.isSessionOwner) {\n            return <div className='settingsBottom'>\n                <input onClick={stopSession} type='button' className='waves-effect red btn' value='stop'/>\n                {props.startTimer && <Timer/>}\n            </div>\n        } else if(!props.showResult && props.isSessionOwner) {\n            return <input onClick={sendSettings} type='button' className='waves-effect waves-light btn' value='start'/>\n        }\n        if((!props.isSessionOwner && !props.sessionStarted) || (props.isSessionOwner && props.showResult))\n            return <div onClick={props.setShowResult} type='button' className='waves-effect waves-light btn backButton'><i className='material-icons'>keyboard_arrow_left</i>back</div>\n        else return <div></div>\n     }\n\n    return (\n        <div className='settingsPage'>\n        <div className='settingsForm' id='settingsForm'>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Concurrent probes</div>\n                <input type='number' className='inputNumber' name='probes' calcrooms='1' onChange={changeHandler} defaultValue='1' min='1' max='100'/>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Session size</div>\n                <input type='number' className='inputNumber' name='size' calcrooms='1' onChange={changeHandler} defaultValue='1' min='1' max='10'/>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Rooms</div>\n                <input type='number' className='inputNumber' value={sessionSettings.rooms} name='rooms' onChange={calcSession} min='1' max='10'/>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Page loading timeout</div>\n                <input type='number' className='inputNumber' name='pageLoadTimeout' onChange={changeHandler} min='1' defaultValue='5' max='15'/>\n                <div className='settingsSessionTitle'>sec</div>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Screenshot every</div>\n                <input type='number' className='inputNumber' name='screenshotInterval' onChange={changeHandler} min='1' defaultValue='30' max='120'/>\n                <div className='settingsSessionTitle'>sec</div>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Connection check every</div>\n                <input type='number' className='inputNumber' name='connectionCheckInterval' onChange={changeHandler}  min='1' defaultValue='5' max='60'/> \n                <div className='settingsSessionTitle'>sec</div>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Servers</div>\n                <input type='number' className='inputNumber' name='servers' onChange={changeHandler}  min='1' defaultValue='1' max={sessionSettings.probes}/>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Server type</div>\n                <div className=\"input-field col s12 envOptions\">\n                <select onChange={changeHandler} name='serversType' className='browser-default'>\n                <option value=\"t2.micro\">t2.micro</option>\n                <option value=\"t2.small\">t2.small</option>\n                <option value=\"t2.large\">t2.large</option>\n                </select>\n            </div>\n            </div>\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>Session duration</div>\n                <input type='number' className='inputNumber' name='duration' onChange={changeHandler} min='1' defaultValue='5' max='10'/>\n                <div className='settingsSessionTitle'> min </div>\n            </div>\n            <div className='settingsSession'>\n            <div className='settingsSessionTitle'>Target</div>\n            <div className=\"input-field col s12 envOptions\">\n                <select onChange={changeHandler} name='target' className='browser-default'>\n                <option value=\"test\">Testing</option>\n                <option value=\"dev\">Develop</option>\n                <option value=\"preprod\">Preprod</option>\n                <option value=\"API\">roomManager API</option>\n                </select>\n            </div>\n            <div className='settingsSessionTitle'>{ targetUrls[sessionSettings.target] }</div>\n            { sessionSettings.target === 'API' &&\n            <div className='settingsSession'>\n                <div className='settingsSessionTitle'>isRegion</div>\n                <input type='number' className='inputNumber' name='isRegion' onChange={changeHandler}  min='1' defaultValue='28' max='130'/> \n            </div>\n            }\n        </div>\n        </div>\n            <div className='settingsStartButton'>\n                {renderSettingsBottom()}\n                <SnakeGame/>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Settings;","/home/lord/Документы/node/headlessBot/frontend/src/components/MainPage/Result.js",["64","65","66","67","68","69"],"import { useEffect, useState } from 'react';\nimport Preloader from '../Preloader'\nimport M from 'materialize-css/dist/js/materialize.min.js'\nimport classnames from 'classnames';\nimport {Chart} from '../Chart'\n\nlet openedCollabsiblesUser = {};\nlet openedCollabsiblesRoom = {};\nconst MOST_VIDEOS_ENABLED = 1;\n\nfunction Result(props) {\n    const [autoCollapse, setAutoCollapse] = useState(false);\n    const [showChart, setShowChart] = useState(false)\n\n    useEffect(() => {\n        const elems = document.querySelectorAll('.tooltipped');\n        M.Tooltip.init(elems);\n    })\n\n    useEffect(()=>{\n        const elemsCol = document.querySelectorAll('.collapsible');\n        M.Collapsible.init(elemsCol, {accordion: autoCollapse});\n     //   console.log(instances)\n    },[autoCollapse, props.videosEnabled])\n\n    useEffect(() => {\n        const elemsImg = document.querySelectorAll('.materialboxed');\n        const instancesImg = M.Materialbox.init(elemsImg)\n         console.log('===',instancesImg);\n    }, [props.screenshots])\n\n    function calcMustVideos(usersInRoom) {\n        if (usersInRoom <= MOST_VIDEOS_ENABLED) {\n            return usersInRoom ** 2;\n        } else {\n            const disabledVideoUsers =  usersInRoom - MOST_VIDEOS_ENABLED;\n            return (MOST_VIDEOS_ENABLED ** 2) + MOST_VIDEOS_ENABLED * disabledVideoUsers;\n        }\n    }\n\n    function calcCurrentRoomVideos(users) {\n        let currentVideos = 0;\n        users.forEach(({probeId, num}) => {\n            currentVideos += num;\n        });\n        return currentVideos;\n    }\n\n    function renderImage(elementKey, img, i) {\n       // M.Materialbox.init(e.target)\n        return <div key={`img/${elementKey}${i}`} className='resultScreenshot'>\n            <img className=\"materialboxed\" width=\"200\" src={'data:image/png;base64,'+img}/></div>\n    }\n\n    function renderUsers(roomKey, usersInRoom, {probeId, num}) {\n        const elementKey = `${roomKey}/user${probeId}`;\n        const wasOpenned = openedCollabsiblesUser[elementKey];\n        const userMustSeeVideosCount = MOST_VIDEOS_ENABLED > usersInRoom ? usersInRoom : MOST_VIDEOS_ENABLED;\n        return <li className={classnames({['active removeTransition']:wasOpenned})} \n                    onClick={(e)=>handleClickCollapsible(elementKey, e)} \n                    name={elementKey}\n                     key={elementKey}>\n                    <div className=\"collapsible-header\">\n                        <div className='resultUserName'>{'user'+(+probeId+1)}</div>\n                        <div className='resultUserStat'>Videos: {`${num}/${userMustSeeVideosCount}`} \n                        {num === usersInRoom && <i className=\"material-icons doneIcon\">done</i>}\n                        {props.screenshots[elementKey] && <div className='resultUserStat'>{props.screenshots[elementKey].length}<i className='material-icons'>photo_library</i></div>}\n                        </div>\n                    </div>\n                    <div className=\"collapsible-body\">\n                        {props.screenshots[elementKey] && <div className={'screenshotsWrapper'}>{props.screenshots[elementKey].map(renderImage.bind(this, elementKey))}</div>}\n                    </div>\n                </li>\n        return <div key={`user${probeId}`}><div className='pageName'>{`user${probeId}`}</div><div><em>videos:</em> <b>{num}</b></div></div>\n    }\n\n    function getCollapsibleElemsValue(openedCollabsiblesObj, el) {\n        const newVal = !openedCollabsiblesObj[el];\n        if(autoCollapse) openedCollabsiblesObj = {};\n        openedCollabsiblesObj[el] = newVal;\n        return openedCollabsiblesObj\n    }\n    \n    function handleClickCollapsible(el,e, isRoom) {\n        e.stopPropagation()\n        if (isRoom) {\n            openedCollabsiblesRoom = getCollapsibleElemsValue(openedCollabsiblesRoom, el);\n           // console.log(openedCollabsiblesRoom)\n        } else {\n            openedCollabsiblesUser = getCollapsibleElemsValue(openedCollabsiblesUser, el)\n           // console.log(openedCollabsiblesUser)\n        }\n        // очищать в случае анмаунта\n    }\n    \n    function renderSessions(sessionId) {\n        const elementKey = `room${sessionId}`;\n        const wasOpenned = openedCollabsiblesRoom[elementKey];\n        const usersInRoom = props.videosEnabled[+sessionId];\n        const numberOfUsersInRoom = usersInRoom.length;\n        const mustBeVideos = calcMustVideos(numberOfUsersInRoom);\n        const videosInRoom = calcCurrentRoomVideos(usersInRoom);\n      //  console.log('usersInRoom', usersInRoom)\n\n        return  <li className={classnames({['active removeTransition']:wasOpenned})}  \n                    name={elementKey} \n                    onClick={(e)=>handleClickCollapsible(elementKey, e, true)} \n                    key={elementKey}>\n                    <div className=\"collapsible-header\">\n                        <div className='resultRoomName'>{'room'+(+sessionId+1)}</div>\n                        <div className='resultRoomStat'>users: {numberOfUsersInRoom}</div>\n                        <div className='resultRoomStat'>videos: {`${videosInRoom}/${mustBeVideos}`}</div>\n                        {videosInRoom === mustBeVideos && <i className=\"material-icons doneIcon\">done_all</i>}\n                    </div>\n                    <div className=\"collapsible-body collapsible-bodyResult\">\n                        <ul className=\"collapsible expandable\">\n                            {usersInRoom.map(renderUsers.bind(this, `room${sessionId}`, numberOfUsersInRoom))}\n                        </ul>\n                    </div>\n                </li>\n\n        return <div key={`${sessionId}/${Date.now()}`} className='resultItem'>\n                <div>{'room'+sessionId}</div>\n                <div>{props.videosEnabled[sessionId].map(renderUsers)}</div>\n            </div>\n    }\n\n    function renderResults () {\n        //console.log('123',props.videosEnabled)\n       // console.log('eee', Object.keys(props.videosEnabled))\n        return <ul className=\"collapsible popout collapsibleResult\">\n                {Object.keys(props.videosEnabled).map(renderSessions)}\n                </ul>\n        return \n    }\n\n    function onAutoColSwitchChange(e) {\n        setAutoCollapse(e.target.checked)\n\n    }\n\n    function setShowChartState() {\n        setShowChart(!showChart)\n    }\n\n    // const elemsImg = document.querySelectorAll('.materialboxed');\n    // const instancesImg = M.Materialbox.init(elemsImg)\n    // console.log('instancesImg', instancesImg)\n\n    const chartButtomTooltip = showChart ? 'hide chart' : 'show chart';\n\n    if (!Object.keys(props.videosEnabled).length) {\n        \n        return <div className='statDuringSession'>\n            {/* <Chart chartData={chartData}/> */}\n            <Preloader/>\n        </div>}\n    return (\n        <div className='statDuringSession'>\n            <div className='commonStat'>\n                <div className='leftSide'>\n                    <div className='statOption'>\n                        videos: {props.allVideosCount}\n                    </div>\n                    <div className='statOption'>\n                        max videos: {props.maxVideosCount}\n                    </div>\n                    <div className='statOption'>\n                    <i className='material-icons chartIcon tooltipped' data-position=\"top\" data-tooltip={chartButtomTooltip} onClick={setShowChartState}>insert_chart</i>\n                    </div>\n                </div>\n                <div className='rightSide'>\n                    <div className=\"switch switchAutoCollapse\">\n                        <label>\n                        Auto callapse\n                        <input type=\"checkbox\" onChange={onAutoColSwitchChange}/>\n                        <span className=\"lever\"></span>\n                        </label>\n                    </div>\n                </div>\n             </div>\n            <div className='result'>\n            {showChart && <Chart chartData={props.chartData || []}/>}\n                {renderResults()}\n            </div>\n        </div>\n    );\n}\n\nexport default Result;","/home/lord/Документы/node/headlessBot/frontend/src/components/Preloader/index.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/Timer/index.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/Chart/index.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/SnakeGame/index.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/SnakeGame/Snake.js",[],"/home/lord/Документы/node/headlessBot/frontend/src/components/History/index.js",["70","71"],"import { useEffect, useState } from \"react\";\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nfunction History(props) {\n    const renderHistorySession = (item) => {\n        const { target, size, probes, duration, servers } = item.settings;\n        return (\n            <div\n                key={item.sessionId}\n                onClick={() => props.requestSessionHistory(item.sessionId)}\n                className=\"collection-item historyItem\"\n            >\n                <div className=\"historyItemOptionsWrapper\">\n                    <div className=\"historyItemOption\">{`target: ${target}`}</div>\n                    <div className=\"historyItemOption\">{`session size: ${size}`}</div>\n                    <div className=\"historyItemOption\">{`probes: ${probes}`}</div>\n                    <div className=\"historyItemOption\">{`duration: ${duration / 60}min`}</div>\n                    <div className=\"historyItemOption\">{`servers: ${servers}`}</div>\n                </div>\n\n                <span className=\"badge\">\n                    {new Date(+item.sessionId).toJSON()}\n                </span>\n            </div>\n        );\n    };\n    if (!props.historySessions.length) return null;\n    return (\n        <div className=\"statDuringSession\">\n            <div className=\"collection\">\n                {props.historySessions.map(renderHistorySession)}\n            </div>\n        </div>\n    );\n}\n\nexport default History;\n",{"ruleId":"72","severity":1,"message":"73","line":41,"column":5,"nodeType":"74","messageId":"75","endLine":41,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":5,"column":10,"nodeType":"78","messageId":"79","endLine":5,"endColumn":14},{"ruleId":"80","severity":1,"message":"81","line":52,"column":13,"nodeType":"82","endLine":52,"endColumn":92},{"ruleId":"83","severity":1,"message":"84","line":59,"column":43,"nodeType":"85","messageId":"86","endLine":59,"endColumn":81,"fix":"87"},{"ruleId":"88","severity":1,"message":"89","line":74,"column":9,"nodeType":"90","messageId":"91","endLine":74,"endColumn":140},{"ruleId":"83","severity":1,"message":"84","line":105,"column":44,"nodeType":"85","messageId":"86","endLine":105,"endColumn":82,"fix":"92"},{"ruleId":"88","severity":1,"message":"89","line":122,"column":9,"nodeType":"90","messageId":"91","endLine":125,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":134,"column":9,"nodeType":"90","messageId":"91","endLine":134,"endColumn":15},{"ruleId":"76","severity":1,"message":"93","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":19},{"ruleId":"76","severity":1,"message":"94","line":1,"column":21,"nodeType":"78","messageId":"79","endLine":1,"endColumn":29},"no-dupe-keys","Duplicate key 'sessionStarted'.","ObjectExpression","unexpected","no-unused-vars","'type' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property ['active removeTransition'] found.","Property","unnecessarilyComputedProperty",{"range":"95","text":"96"},"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode",{"range":"97","text":"96"},"'useEffect' is defined but never used.","'useState' is defined but never used.",[2163,2190],"'active removeTransition'",[4578,4605]]